{
  "nodes": [
    {
      "parameters": {
        "teamId": {
          "__rl": true,
          "value": "19231660-890a-4d8c-aa37-eec9155a7382",
          "mode": "list",
          "cachedResultName": "tlv-n8n-team"
        },
        "channelId": {
          "__rl": true,
          "value": "19:QkBEBfBTzgie0IpxWzP6TlQu71o5V7xNOshVTwxLjss1@thread.tacv2",
          "mode": "list",
          "cachedResultName": "ai-confirmations"
        }
      },
      "type": "n8n-nodes-base.microsoftTeamsTrigger",
      "typeVersion": 1,
      "position": [-2384, -32],
      "id": "b02af19c-cb68-4b07-b5df-10b4de16430c",
      "name": "On Teams message",
      "webhookId": "130530eb-9a73-4ac1-ab88-5450da59feb2",
      "credentials": {
        "microsoftTeamsOAuth2Api": {
          "id": "JfBX4Cn1M8SQBnFV",
          "name": "Microsoft Teams account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "cond-is-reply-odata",
              "leftValue": "={{ $json['@odata.id'] || '' }}",
              "rightValue": "replies(",
              "operator": {
                "type": "string",
                "operation": "contains"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [-2208, -32],
      "id": "b6461972-9a1f-49a2-8b7a-a80800d6eb31",
      "name": "Is CHANGE reply?"
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "// Extract context from @odata.id since trigger lacks message body\nconst odataId = $json['@odata.id'] || '';\nconst m = odataId.match(/teams\\('([^']+)'\\)\\/channels\\('([^']+)'\\)\\/messages\\('([^']+)'\\)\\/replies\\('([^']+)'\\)/);\nlet teamId = null, channelId = null, parentMessageId = null, replyId = null;\nif (m) {\n  teamId = m[1];\n  channelId = m[2];\n  parentMessageId = m[3];\n  replyId = m[4];\n}\nreturn { teamId, channelId, parentMessageId, replyId, odataId };"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [-2000, -48],
      "id": "bca7ea50-da93-4ca2-811e-348e6d2ddbbd",
      "name": "Extract reply context"
    },
    {
      "parameters": {
        "url": "={{ 'https://graph.microsoft.com/v1.0/teams/' + $('Extract reply context').item.json.teamId + '/channels/' + $('Extract reply context').item.json.channelId + '/messages/' + $('Extract reply context').item.json.parentMessageId }}",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "microsoftTeamsOAuth2Api",
        "options": {
          "response": {
            "response": {
              "responseFormat": "json"
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [-1632, 128],
      "id": "20386f55-7fee-4ed6-a3f1-0e3631b00ade",
      "name": "Get parent message",
      "credentials": {
        "microsoftTeamsOAuth2Api": {
          "id": "JfBX4Cn1M8SQBnFV",
          "name": "Microsoft Teams account"
        }
      }
    },
    {
      "parameters": {
        "url": "={{ 'https://graph.microsoft.com/v1.0/teams/' + $('Extract reply context').item.json.teamId + '/channels/' + $('Extract reply context').item.json.channelId + '/messages/' + $('Extract reply context').item.json.parentMessageId + '/replies/' + $('Extract reply context').item.json.replyId }}",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "microsoftTeamsOAuth2Api",
        "options": {
          "response": {
            "response": {
              "responseFormat": "json"
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [-1792, -96],
      "id": "c283ec94-103f-4ac2-ac86-949a4c895287",
      "name": "Get reply message",
      "credentials": {
        "microsoftTeamsOAuth2Api": {
          "id": "JfBX4Cn1M8SQBnFV",
          "name": "Microsoft Teams account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "has-change",
              "leftValue": "={{ $json.body.content }}",
              "rightValue": "CHANGE:",
              "operator": {
                "type": "string",
                "operation": "contains"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [-1632, -96],
      "id": "9be4374a-3076-4504-939c-6fc79d1946ac",
      "name": "Has CHANGE prefix?"
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineAll",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [-1184, -32],
      "id": "5404072a-7e58-44ec-b142-1261f945f230",
      "name": "Merge reply + parent"
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "// Extract useful fields from merged item (reply context + parent message)\nconst replyText = $json.replyText || '';\nconst parentHtml = $json.body?.content || $json.parentHtml || '';\n\nfunction stripTags(s) { return s.replace(/<[^>]*>/g, '').trim(); }\nconst cleanReply = stripTags(replyText).replace(/^CHANGE:\\s*/i, '').trim();\n\n// Extract Ticket ID from parent HTML\nlet ticketId = null;\nconst idMatch = parentHtml.match(/<li><strong>Ticket ID<\\/strong>:\\s*([^<]+)<\\/li>/i);\nif (idMatch) ticketId = idMatch[1].trim();\n\n// Extract original draft inside first <pre>...</pre>\nlet originalDraft = '';\nconst preMatch = parentHtml.match(/<pre[^>]*>([\\s\\S]*?)<\\/pre>/i);\nif (preMatch) {\n  originalDraft = preMatch[1].replace(/&lt;/g, '<').replace(/&gt;/g, '>').replace(/&amp;/g, '&').trim();\n}\n\n// Extract first Approve link (resumeUrl)\nlet approveLink = null;\nconst linkMatch = parentHtml.match(/<a[^>]+href=\\\"([^\\\"]*resume[^\\\"]*)\\\"[^>]*>[^<]*Approve[^<]*<\\/a>/i) || parentHtml.match(/<a[^>]+href=\\\"([^\\\"]*resumeUrl[^\\\"]*)\\\"/i);\nif (linkMatch) approveLink = linkMatch[1];\n\n// Pull reply context (team/channel/parent IDs) from the earlier node\nconst ctx = $('Extract reply context').item.json || {};\nconst teamId = ctx.teamId || null;\nconst channelId = ctx.channelId || null;\nconst parentMessageId = ctx.parentMessageId || null;\n\nreturn { ticketId, originalDraft, changeRequest: cleanReply, parentHtml, approveLink, parentMessageId, teamId, channelId };"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [-1008, -32],
      "id": "1d4d3cfa-5132-4311-a09e-445f9d992cbc",
      "name": "Parse context"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=You are an IT support assistant at Team IT. Rewrite the following email draft by applying the reviewer's requested changes. Maintain the original language, tone, and brevity while improving clarity.\n\n---\nOriginal Draft:\n{{ $json.originalDraft }}\n\nChange Request:\n{{ $json.changeRequest }}\n\nReturn only the revised email body, no preface or commentary.",
        "messages": {
          "messageValues": [
            {
              "message": "You are an IT support assistant. Apply the requested changes faithfully while preserving language and professional tone."
            }
          ]
        },
        "batching": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.7,
      "position": [-784, -32],
      "id": "72977fff-a2bc-4b06-905d-5cb5740da748",
      "name": "Rewrite with changes"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "05a98990-47dd-4e03-a9de-453a887f0dc0",
              "name": "replyText",
              "value": "={{ $json.body.content }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [-1424, -112],
      "id": "81cbf20f-d945-46c2-aa41-35f1156505aa",
      "name": "save reply text"
    },
    {
      "parameters": {
        "model": "mistral-small-latest",
        "options": {
          "maxRetries": 1
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatMistralCloud",
      "typeVersion": 1,
      "position": [-784, 208],
      "id": "2fb4d0dd-0c79-41f1-a481-29f77b71adb1",
      "name": "mistral-small-latest",
      "credentials": {
        "mistralCloudApi": {
          "id": "OKqIIU4OvY7yKbuT",
          "name": "Mistral Cloud account"
        }
      }
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "// Build updated HTML by replacing first <pre>...</pre> with the rewritten draft\nconst parentHtml = $('Parse context').item.json.parentHtml || '';\nconst newText = ($json.text || '').trim();\nfunction escapeHtml(s) { return s.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;'); }\nconst escaped = escapeHtml(newText);\nlet updatedHtml = parentHtml;\nif (parentHtml) {\n  updatedHtml = parentHtml.replace(/<pre[^>]*>[\\s\\S]*?<\\/pre>/i, `<pre style=\"margin:0 0 12px 0;white-space:pre-wrap;max-height:380px;overflow:auto;\">\\n${escaped}\\n\t\t</pre>`);\n}\nreturn { updatedHtml };"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [-416, -32],
      "id": "9e47be72-8d81-4a81-bba9-8e5d3d96fb73",
      "name": "Build updated HTML"
    },
    {
      "parameters": {
        "method": "PATCH",
        "url": "={{ 'https://graph.microsoft.com/v1.0/teams/' + $('Parse context').item.json.teamId + '/channels/' + $('Parse context').item.json.channelId + '/messages/' + $('Parse context').item.json.parentMessageId }}",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "microsoftTeamsOAuth2Api",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ { body: { contentType: 'html', content: $json.updatedHtml } } }}",
        "options": {
          "response": {
            "response": {
              "fullResponse": true,
              "neverError": true,
              "responseFormat": "text"
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [-192, -32],
      "id": "5bc28ac9-8b89-43db-8fb2-bedfa0606c16",
      "name": "Update parent message",
      "alwaysOutputData": true,
      "credentials": {
        "microsoftTeamsOAuth2Api": {
          "id": "JfBX4Cn1M8SQBnFV",
          "name": "Microsoft Teams account"
        }
      }
    }
  ],
  "connections": {
    "On Teams message": {
      "main": [
        [
          {
            "node": "Is CHANGE reply?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Is CHANGE reply?": {
      "main": [
        [
          {
            "node": "Extract reply context",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract reply context": {
      "main": [
        [
          {
            "node": "Get parent message",
            "type": "main",
            "index": 0
          },
          {
            "node": "Get reply message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get parent message": {
      "main": [
        [
          {
            "node": "Merge reply + parent",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Get reply message": {
      "main": [
        [
          {
            "node": "Has CHANGE prefix?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Has CHANGE prefix?": {
      "main": [
        [
          {
            "node": "save reply text",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge reply + parent": {
      "main": [
        [
          {
            "node": "Parse context",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse context": {
      "main": [
        [
          {
            "node": "Rewrite with changes",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Rewrite with changes": {
      "main": [
        [
          {
            "node": "Build updated HTML",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "save reply text": {
      "main": [
        [
          {
            "node": "Merge reply + parent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "mistral-small-latest": {
      "ai_languageModel": [
        [
          {
            "node": "Rewrite with changes",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Build updated HTML": {
      "main": [
        [
          {
            "node": "Update parent message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "cb82cb908cab52e40008ef27de71c2aa4d5b63789fd0294ce950d5a085fdc1d1"
  }
}
