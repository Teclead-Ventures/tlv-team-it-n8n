{
  "nodes": [
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "seconds",
              "secondsInterval": 10
            }
          ]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [-1056, 112],
      "id": "ea4de1e3-34c8-4c48-9309-a5211716198c",
      "name": "Schedule Trigger"
    },
    {
      "parameters": {
        "model": "meta-llama/llama-3.3-70b-instruct",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "typeVersion": 1,
      "position": [1296, 304],
      "id": "a7ab68dc-a33e-4646-a4a1-50cc76b9f900",
      "name": "llama-3.3-70b-instruct1",
      "credentials": {
        "openRouterApi": {
          "id": "sv6OjO0wxQaY6KSl",
          "name": "OpenRouter account"
        }
      }
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [352, 320],
      "id": "a2a4b24e-3743-4d8a-a3b0-5650beaa268c",
      "name": "No Operation, do nothing"
    },
    {
      "parameters": {
        "fieldToSplitOut": "=content",
        "options": {}
      },
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [-368, 112],
      "id": "363de5c8-ec87-4270-9be7-dd11bf17c93b",
      "name": "Split Out"
    },
    {
      "parameters": {
        "method": "PUT",
        "url": "https://helpdesk.team-it-group.de/backend/api/v1/tickets",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"modifiedWithinTimeframe\": {\n    \"from\": {{ Math.floor($now.minus({ minutes: 200 }).toMillis() / 1000) }},\n    \"to\": {{ Math.floor($now.toMillis() / 1000) }}\n  },\n  \"includeDoneTickets\": false,\n  \"companies\": [7]\n}",
        "options": {
          "response": {
            "response": {
              "neverError": true,
              "responseFormat": "json"
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [-608, 112],
      "id": "47615ec3-e8ad-44cd-94c2-4aeb76f02b00",
      "name": "Get all last hours Tickets",
      "credentials": {
        "httpHeaderAuth": {
          "id": "O7ih4vhlXtdpFYEv",
          "name": "Header Auth account"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://helpdesk.team-it-group.de/backend/api/v1/tickets/{{ $json.output.id }}/comments",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"title\": \"Automatic AI Classification\",\n  \"content\": \"Summary: {{ $json.output.summary }}\\nCategory: {{ $json.output.category }}\\nProblem Location: {{ $json.output.problem_location }}\\nCustomer Actions: {{ $json.output.customer_actions }}\\nAttachment Summary: {{ $json.output.attachment_summary }}\\nAttachment Analysis: {{ $json.output.attachment_analysis }}\",\n  \"internal\": true\n}\n",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [1520, -64],
      "id": "4803cc29-979f-42b9-9702-a4eb37ac3913",
      "name": "Add a comment with classification",
      "credentials": {
        "httpHeaderAuth": {
          "id": "O7ih4vhlXtdpFYEv",
          "name": "Header Auth account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "6bff2072-7252-4c74-a8c3-c4a493b2fd80",
              "leftValue": "={{ $json.internalContent }}",
              "rightValue": "X-AUTO-CLASSIFIED",
              "operator": {
                "type": "string",
                "operation": "notContains"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [-160, 112],
      "id": "777b750e-103f-48ad-a8e1-7d46bcdb53d6",
      "name": "If not already classified"
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "uC4tCQ1uf8V5hQTZ",
          "mode": "list",
          "cachedResultName": "test_tanss_login"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {},
          "matchingColumns": [],
          "schema": [],
          "attemptToConvertTypes": false,
          "convertFieldsToString": true
        },
        "options": {
          "waitForSubWorkflow": true
        }
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.2,
      "position": [-832, 112],
      "id": "db767f2f-9bca-47a1-ad9f-35600952a392",
      "name": "Get API Key"
    },
    {
      "parameters": {
        "method": "PUT",
        "url": "=https://helpdesk.team-it-group.de/backend/api/v1/tickets/{{ $json.output.id }}",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"internalContent\": \"X-AUTO-CLASSIFIED\",\n  \"priority\": {{ $json.output.priority }},\n  \"assignedToDepartmentId\": {{ $json.output.department_id }}\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [1792, -64],
      "id": "170509ed-2cde-428b-be10-5161f0a97ec2",
      "name": "Update Ticket",
      "credentials": {
        "httpHeaderAuth": {
          "id": "O7ih4vhlXtdpFYEv",
          "name": "Header Auth account"
        }
      }
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "JX9l3asxIfeXCOyb",
          "mode": "list",
          "cachedResultName": "test_tanss_get_documents"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {
            "id": "={{ $json.id }}",
            "numberOfDocuments": "={{ $json.numberOfDocuments }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "id",
              "displayName": "id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "number"
            },
            {
              "id": "numberOfDocuments",
              "displayName": "numberOfDocuments",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "number",
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": true
        },
        "options": {
          "waitForSubWorkflow": true
        }
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.2,
      "position": [352, -320],
      "id": "82a2c7c4-ef22-4211-9f21-947aecde15ee",
      "name": "Execute Document Workflow"
    },
    {
      "parameters": {
        "content": "## Todo's\n* When to trigger the flow?\n* Which Tickets should be fetched (company, employee, board)?\n* Only new tickets?",
        "height": 432,
        "width": 672
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [-1104, -64],
      "typeVersion": 1,
      "id": "f95f542d-4776-472f-8dfa-7143f36a4c17",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "QVVSuDhw3tvLqUpP",
          "mode": "list",
          "cachedResultName": "sub_tanss_images"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {
            "id": "={{ $json.id }}"
          },
          "matchingColumns": ["id"],
          "schema": [
            {
              "id": "id",
              "displayName": "id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "number",
              "removed": false
            },
            {
              "id": "context",
              "displayName": "context",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": true
        },
        "options": {
          "waitForSubWorkflow": true
        }
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.2,
      "position": [352, -480],
      "id": "51cfbd4f-4cfa-4093-aa01-b8b82c7f2a04",
      "name": "Execute Image Workflow"
    },
    {
      "parameters": {
        "content": "## Sub-Workflows",
        "height": 576,
        "color": 2
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [272, -544],
      "typeVersion": 1,
      "id": "c8038647-0b36-4a21-9151-b67314dc8703",
      "name": "Sticky Note2"
    },
    {
      "parameters": {
        "text": "=**Ticket Data:**\n\n  * **ID:** `{{ $json.id }}`\n  * **Subject:** `{{ $json.title }}`\n  * **Body:** `{{ $json.content }}`\n  * **Due Date:** `{{ $json.dueDate }}`\n  * **Inbound Mails:** `{{\n      $if(($json.inboundMails && $json.inboundMails.length > 0),\n          ($json.inboundMails.map(mail => \n            `\\n- Sender Name: ${mail.senderName}\\n- Subject:${mail.subject}\\n- Body:${mail.bodyPlain}\\n`).join('')),\n          \"None\")\n    }}`\n  * **Attached Documents:**: {{\n      $if(($json.documents && $json.documents.length > 0),\n          ($json.documents.map(doc => \n            `\\n- Title: ${doc.title}\\n- Summary:${doc.summary_text}\\n`).join('')),\n          \"None\")\n    }}\n  * **Attached Images/Screenshots:**: {{\n      $if(($json.images && $json.images.length > 0),\n          ($json.images.map(img => \n            `\\n- Image Name: ${img.fileName}\\n- Summary:${img.imageSummary}\\n`).join('')),\n          \"None\")\n    }}",
        "schemaType": "manual",
        "inputSchema": "{\n  \"type\": \"object\",\n  \"properties\": {\n    \"id\": {\n      \"type\": \"string\",\n      \"description\": \"The original id of the processed Ticket\"\n    },\n    \"summary\": {\n      \"type\": \"string\",\n      \"description\": \"A few sentence summary of the issue.\"\n    },\n    \"category\": {\n      \"type\": \"string\",\n      \"description\": \"The category of the ticket.\",\n      \"enum\": [\n        \"Hardware\",\n        \"Software\",\n        \"Network\",\n        \"Account\",\n        \"Other\"\n      ]\n    },\n    \"department_id\": {\n      \"type\": \"integer\",\n      \"description\": \"The numeric ID of the department best suited to handle the ticket.\",\n      \"enum\": [12, 4, 6]\n    },\n    \"problem_location\": {\n      \"type\": \"string\",\n      \"description\": \"Where the problem is occurring (e.g., office room, device, software name).\"\n    },\n    \"customer_actions\": {\n      \"type\": \"string\",\n      \"description\": \"A summary of what the customer has already tried.\"\n    },\n    \"priority\": {\n      \"type\": \"integer\",\n      \"description\": \"The priority level of the ticket from 1 (low) to 9 (high).\"\n    },\n    \"attachment_summary\": {\n      \"type\": \"string\",\n      \"description\": \"short summary of the content from all attachments, images and documents provided (if any)\"\n    },\n    \"attachment_analysis\": {\n      \"type\": \"string\",\n      \"description\": \"A detailed analysis on how the attachments content relates to the ticket itself and what additional information on the problem can be extracted from it\"\n    },  \n    \"clarification_questions\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"string\"\n      },\n      \"description\": \"A list of detailed and fitting questions to the customer to clarify open questions.\"\n    }\n  },\n  \"required\": [\n    \"id\",\n    \"summary\",\n    \"category\",\n    \"department_id\",\n    \"problem_location\",\n    \"customer_actions\",\n    \"priority\",\n    \"attachment_summary\",\n    \"clarification_questions\"\n  ]\n}",
        "options": {
          "systemPromptTemplate": "=You are an expert IT support ticket analyst and dispatcher. Your task is to analyze the support ticket provided by the user, classify it, route it to the correct department, and formulate precise questions to gather any missing information.\n\n-----\n\n### **Instructions**\n\n1.  **Analyze the Ticket:** Carefully review the ticket content and any attached document summaries. If the ticket content is empty, the content can be found in inbound Mails. Treat inbound mails as ticket content \n2.  **Formulate Clarification Questions:** Based on your analysis, identify what information is missing to fully resolve the issue. Create a list of detailed and specific questions for the customer. The goal of these questions is to gather all necessary information so the support team can act immediately upon receiving the customer's answers.\n3.  **Route to Department:** Determine the single most appropriate department to handle the ticket based on the rules below.\n4.  **Provide JSON Output:** Structure your entire response as a single JSON object, containing the department ID and the list of clarification questions. **Do not** add any text outside of the JSON object.\n\n-----\n\n### **Department Routing**\n\nBased on the ticket's content, determine the single most appropriate department to handle the request from the list below. Common keywords are provided to help you decide.\n\n  * **12 - Dispatching:** Field technician requests, on-site hardware repair, physical equipment delivery.\n  * **4 - Technik/Support (Advanced Support):** (Complex) technical problems, server issues, network outages, escalations from 1st Level.\n  * **6 - Verkauf/Vetrieb (Sales):** CRM issues, sales pipeline questions, customer account setup for sales.\n\nReturn **ONLY the numeric ID** for the chosen department in the `department_id` field.\n\nPlease respond in the language used by the customer, which is mostly german."
        }
      },
      "type": "@n8n/n8n-nodes-langchain.informationExtractor",
      "typeVersion": 1.2,
      "position": [1136, 80],
      "id": "c0a613dd-7411-4ecb-bb7d-eff7d0ccc32a",
      "name": "Ticket Information Extractor"
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "FCTqIrPU9YlQoUTV",
          "mode": "list",
          "cachedResultName": "test_tanss_mails"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {
            "ticketId": "={{ $json.id }}"
          },
          "matchingColumns": ["ticketId"],
          "schema": [
            {
              "id": "ticketId",
              "displayName": "ticketId",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "number",
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": true
        },
        "options": {}
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.2,
      "position": [352, -128],
      "id": "3fa3bd20-f3cb-46dc-86f8-58d4e37294d3",
      "name": "Execute Mail Workflow"
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineAll",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [752, -144],
      "id": "6843681c-8a84-4dcb-a51b-a58bc793ee2a",
      "name": "Merge Mail and Attachments"
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineAll",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [576, -400],
      "id": "99b09b65-ea88-46c0-971e-4d88fae5439e",
      "name": "Merge Attachments"
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineAll",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [944, 80],
      "id": "31992547-8cd1-4296-86d9-2f462c5ed66a",
      "name": "Merge with Ticketdata"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Ticket Data:\n- Ticket Title: {{ $('Merge with Ticketdata').item.json.title }}\n- Ticket Content: {{ $('Merge with Ticketdata').item.json.content }}\n- Ticket Summary:  {{ $json.output.summary }}\n- Attachment Analysis: {{ $json.output.attachment_analysis }}\n- Clarification Questions: {{ $json.output.clarification_questions }}\n",
        "hasOutputParser": true,
        "messages": {
          "messageValues": [
            {
              "message": "You are a helpful IT Support employee from **Team IT**. Your goal is to write a professional and clear email to a user based on a ticket summary and a pre-defined list of questions. The purpose of the email is to gather the necessary information to resolve their IT issue.  \n**# Core Instructions**  \n1.  **Language:** You **MUST** write the entire email in the same language as the provided `Ticket Summary`. \n2.  **Structure:**     \n* Start with a polite greeting using the `User Name`.     \n* Briefly acknowledge the user's problem based on the `Ticket Summary`.     \n* State that you need a bit more information to help.     \n* Present the `Questions to Ask` clearly, preferably in a numbered list.     \n* End with a professional closing from \"Team IT\".  \n**# Input Format**  * `## Customer Name:` The Customers name. * `## Ticket Summary:` A short description of the user's problem. * * `## Attachment Summary:` A short description of the attachments provided. * `## Questions to Ask:` A list of questions you need to include in the email, but can be rewritten.  \n---  ### **Example**  **[START OF INPUT]**  `## User Name:` Klaus `## Ticket Summary:` Benutzer kann sich nicht mit dem VPN verbinden, bekommt immer eine Fehlermeldung. `## Questions to Ask:` 1. Welche Fehlermeldung wird genau angezeigt? (Bitte Screenshot beifügen) 2. Von welchem Standort aus versuchen Sie sich zu verbinden (Büro oder Homeoffice)? 3. Haben Sie versucht, den Computer neu zu starten?  **[END OF INPUT]**  **[EXPECTED OUTPUT DRAFT]**  Hallo Klaus, vielen Dank für Ihre Nachricht. Ich habe gesehen, dass Sie Probleme mit der VPN-Verbindung haben.  Um das Problem schnell für Sie zu lösen, benötige ich noch ein paar zusätzliche Informationen. Könnten Sie mir bitte die folgenden Fragen beantworten?  1.  Welche Fehlermeldung wird genau angezeigt? (Bitte fügen Sie, wenn möglich, einen Screenshot bei) 2.  Von welchem Standort aus versuchen Sie sich zu verbinden (Büro oder Homeoffice)? 3.  Haben Sie bereits versucht, den Computer neu zu starten?  Sobald ich Ihre Antworten habe, kann ich die nächsten Schritte einleiten.  Viele Grüße,  Team IT"
            }
          ]
        },
        "batching": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.7,
      "position": [1520, 128],
      "id": "a45b6922-adfa-4518-911c-da1ac30c60dd",
      "name": "Draft Ticket Response"
    },
    {
      "parameters": {
        "resource": "channelMessage",
        "teamId": {
          "__rl": true,
          "value": "19231660-890a-4d8c-aa37-eec9155a7382",
          "mode": "list",
          "cachedResultName": "tlv-n8n-team"
        },
        "channelId": {
          "__rl": true,
          "value": "19:QkBEBfBTzgie0IpxWzP6TlQu71o5V7xNOshVTwxLjss1@thread.tacv2",
          "mode": "list",
          "cachedResultName": "ai-confirmations",
          "cachedResultUrl": "https://teams.cloud.microsoft/l/channel/19%3AQkBEBfBTzgie0IpxWzP6TlQu71o5V7xNOshVTwxLjss1%40thread.tacv2/tlv-n8n-team?groupId=19231660-890a-4d8c-aa37-eec9155a7382&tenantId=f50f53d7-0e4f-4626-a1a9-9fe190a9fe64&allowXTenantAccess=True&ngc=True"
        },
        "contentType": "html",
        "message": "=<div style=\"margin:0;padding:0;font-family:'Segoe UI', Arial, sans-serif;\">\n\t<div style=\"max-width:760px;margin:0 auto;\">\n\t\t<p style=\"margin:0 0 8px 0;font-weight:600;\">TANSS ticket reply ready for approval</p>\n\n\t\t<h2 style=\"margin:0 0 12px 0;line-height:1.3;\">\n\t\t\t{{ $('Merge with Ticketdata').item.json.title }}\n\t\t</h2>\n\n\t\t<ul style=\"margin:0 0 12px 0;padding-left:16px;\">\n\t\t\t<li><strong>Ticket ID</strong>: {{ $('Merge with Ticketdata').item.json.id }}</li>\n\t\t\t<li><strong>Reporter</strong>: {{ $('Merge with Ticketdata').item.json.inboundMails[0].senderName }}</li>\n\t\t\t<li><strong>Documents</strong>: {{ $('Merge with Ticketdata').item.json.numberOfDocuments }} Document(s)</li>\n\t\t\t<li><strong>Department</strong>: {{ $('Ticket Information Extractor').item.json.output.department_id }}</li>\n\t\t\t<li><strong>Priority</strong>: {{ $('Ticket Information Extractor').item.json.output.priority }}</li>\n\t\t</ul>\n\n\t\t<hr style=\"margin:8px 0 12px 0;\">\n\n\t\t<p style=\"margin:12px 0 6px 0;font-weight:600;\">AI summary</p>\n\t\t<blockquote style=\"margin:0 0 12px 0;\">\n\t\t\t{{ $('Ticket Information Extractor').item.json.output.summary }}\n\t\t</blockquote>\n\n\t\t<p style=\"margin:12px 0 6px 0;font-weight:600;\">Full draft (to be posted to TANSS as a public reply)</p>\n\t\t<pre style=\"margin:0 0 12px 0;white-space:pre-wrap;max-height:380px;overflow:auto;\">\n{{$json.text}}\n\t\t</pre>\n\n\t\t<p style=\"margin-top:12px;\">\n\t\t\t<a href=\"https://your-n8n.example/webhook/tanss-approve?ticketId={{ $('Merge with Ticketdata').item.json.id }}\">Approve and send via TANSS</a> ·\n\t\t\t<a href=\"https://your-n8n.example/webhook/tanss-reject?ticketId={{ $('Merge with Ticketdata').item.json.id }}\">Reject</a> ·\n\t\t\t<a href=\"https://your-n8n.example/webhook/tanss-request-changes?ticketId={{ $('Merge with Ticketdata').item.json.id }}\">Request changes</a>\n\t\t</p>\n\n\t\t<p style=\"margin-top:4px;font-size:12px;\">This action will trigger the TANSS API to post the reply on the ticket.</p>\n\t</div>\n</div>",
        "options": {}
      },
      "type": "n8n-nodes-base.microsoftTeams",
      "typeVersion": 2,
      "position": [1888, 128],
      "id": "4f4c68ba-08e6-4d99-b9b2-c2c6ab4a873e",
      "name": "create message and wait for reply",
      "webhookId": "3497f4e3-71e7-4385-b9de-3fe7dea137b4",
      "credentials": {
        "microsoftTeamsOAuth2Api": {
          "id": "JfBX4Cn1M8SQBnFV",
          "name": "Microsoft Teams account"
        }
      }
    }
  ],
  "connections": {
    "Schedule Trigger": {
      "main": [
        [
          {
            "node": "Get API Key",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "llama-3.3-70b-instruct1": {
      "ai_languageModel": [
        [
          {
            "node": "Ticket Information Extractor",
            "type": "ai_languageModel",
            "index": 0
          },
          {
            "node": "Draft Ticket Response",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Split Out": {
      "main": [
        [
          {
            "node": "If not already classified",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get all last hours Tickets": {
      "main": [
        [
          {
            "node": "Split Out",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If not already classified": {
      "main": [
        [
          {
            "node": "Execute Image Workflow",
            "type": "main",
            "index": 0
          },
          {
            "node": "Execute Document Workflow",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge with Ticketdata",
            "type": "main",
            "index": 1
          },
          {
            "node": "Execute Mail Workflow",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "No Operation, do nothing",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get API Key": {
      "main": [
        [
          {
            "node": "Get all last hours Tickets",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update Ticket": {
      "main": [[]]
    },
    "Execute Document Workflow": {
      "main": [
        [
          {
            "node": "Merge Attachments",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Execute Image Workflow": {
      "main": [
        [
          {
            "node": "Merge Attachments",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Ticket Information Extractor": {
      "main": [
        [
          {
            "node": "Add a comment with classification",
            "type": "main",
            "index": 0
          },
          {
            "node": "Draft Ticket Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execute Mail Workflow": {
      "main": [
        [
          {
            "node": "Merge Mail and Attachments",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge Mail and Attachments": {
      "main": [
        [
          {
            "node": "Merge with Ticketdata",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge Attachments": {
      "main": [
        [
          {
            "node": "Merge Mail and Attachments",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge with Ticketdata": {
      "main": [
        [
          {
            "node": "Ticket Information Extractor",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Draft Ticket Response": {
      "main": [
        [
          {
            "node": "create message and wait for reply",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "cb82cb908cab52e40008ef27de71c2aa4d5b63789fd0294ce950d5a085fdc1d1"
  }
}
