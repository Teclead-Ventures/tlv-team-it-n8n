{
  "nodes": [
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "seconds",
              "secondsInterval": 10
            }
          ]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [-1488, 832],
      "id": "30a5e1b3-b8d0-449c-826b-a4995da380df",
      "name": "Schedule Trigger"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [-80, 1040],
      "id": "feba2db1-1ca9-4295-ae9c-363aeb83318b",
      "name": "No Operation, do nothing"
    },
    {
      "parameters": {
        "fieldToSplitOut": "=content",
        "options": {}
      },
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [-800, 832],
      "id": "3f1d8e26-3b5c-4bb2-9068-079a3b4851ab",
      "name": "Split Out"
    },
    {
      "parameters": {
        "method": "PUT",
        "url": "https://helpdesk.team-it-group.de/backend/api/v1/tickets",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"modifiedWithinTimeframe\": {\n    \"from\": {{ Math.floor($now.minus({ minutes: 200 }).toMillis() / 1000) }},\n    \"to\": {{ Math.floor($now.toMillis() / 1000) }}\n  },\n  \"includeDoneTickets\": false,\n  \"companies\": [7]\n}",
        "options": {
          "response": {
            "response": {
              "neverError": true,
              "responseFormat": "json"
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [-1040, 832],
      "id": "2c21e93d-c4f8-4471-85f9-bd8f31e72ef1",
      "name": "Get all last hours Tickets",
      "credentials": {
        "httpHeaderAuth": {
          "id": "O7ih4vhlXtdpFYEv",
          "name": "Header Auth account"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://helpdesk.team-it-group.de/backend/api/v1/tickets/{{ $json.output.id }}/comments",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"title\": \"Automatic AI Classification\",\n  \"content\": \"Summary: {{ $json.output.summary }}\\nCategory: {{ $json.output.category }}\\nProblem Location: {{ $json.output.problem_location }}\\nCustomer Actions: {{ $json.output.customer_actions }}\\nAttachment Summary: {{ $json.output.attachment_summary }}\\nAttachment Analysis: {{ $json.output.attachment_analysis }}\",\n  \"internal\": true\n}\n",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [2448, 352],
      "id": "9887ba6b-34c6-4dbf-8434-99bb0d3c41a7",
      "name": "Add a comment with classification",
      "credentials": {
        "httpHeaderAuth": {
          "id": "O7ih4vhlXtdpFYEv",
          "name": "Header Auth account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "6bff2072-7252-4c74-a8c3-c4a493b2fd80",
              "leftValue": "={{ $json.internalContent }}",
              "rightValue": "X-AUTO-CLASSIFIED",
              "operator": {
                "type": "string",
                "operation": "notContains"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [-592, 832],
      "id": "3f91526a-4758-46a6-af4f-5433d8f1d95f",
      "name": "If not already classified"
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "uC4tCQ1uf8V5hQTZ",
          "mode": "list",
          "cachedResultName": "sub_tanss_login"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {},
          "matchingColumns": [],
          "schema": [],
          "attemptToConvertTypes": false,
          "convertFieldsToString": true
        },
        "options": {
          "waitForSubWorkflow": true
        }
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.2,
      "position": [-1264, 832],
      "id": "b88e5d75-0749-4993-bcbb-960c0af8448a",
      "name": "Get API Key"
    },
    {
      "parameters": {
        "method": "PUT",
        "url": "=https://helpdesk.team-it-group.de/backend/api/v1/tickets/{{ $json.output.id }}",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"internalContent\": \"X-AUTO-CLASSIFIED\",\n  \"priority\": {{ $json.output.priority }},\n  \"assignedToDepartmentId\": {{ $json.output.department_id }}\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [2656, 672],
      "id": "ccd9d283-0a2c-424b-ae38-80124f3ff513",
      "name": "Update Ticket",
      "credentials": {
        "httpHeaderAuth": {
          "id": "O7ih4vhlXtdpFYEv",
          "name": "Header Auth account"
        }
      }
    },
    {
      "parameters": {
        "content": "## Todo's\n* When to trigger the flow?\n* Only new tickets?",
        "height": 304,
        "width": 208
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [-1536, 688],
      "typeVersion": 1,
      "id": "5b368bd2-2f71-4fd5-8a12-994e739acd53",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "content": "## Sub-Workflows",
        "height": 272,
        "color": 2
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [-160, 336],
      "typeVersion": 1,
      "id": "03b1bb4e-a9a1-432f-91e6-2f72b8678f78",
      "name": "Sticky Note2"
    },
    {
      "parameters": {
        "text": "=**Ticket Data:**\n\n  * **ID:** `{{ $json.id }}`\n  * **Subject:** `{{ $json.title }}`\n  * **Body:** `{{ $json.content }}`\n  * **Due Date:** `{{ $json.dueDate }}`\n  * **Inbound Mails:** `{{\n      $if(($json.inboundMails && $json.inboundMails.length > 0),\n          ($json.inboundMails.map(mail => \n            `\\n- Sender Name: ${mail.senderName}\\n- Subject:${mail.subject}\\n- Body:${mail.bodyPlain}\\n`).join('')),\n          \"None\")\n    }}`\n  * **Attached Documents:**: {{\n      $if(($json.documents && $json.documents.length > 0),\n          ($json.documents.map(doc => \n            `\\n- Title: ${doc.title}\\n- Summary:${doc.summary_text}\\n`).join('')),\n          \"None\")\n    }}\n  * **Attached Images/Screenshots:**: {{\n      $if(($json.images && $json.images.length > 0),\n          ($json.images.map(img => \n            `\\n- Image Name: ${img.fileName}\\n- Summary:${img.imageSummary}\\n`).join('')),\n          \"None\")\n    }}\n\nImportant: The entire output must be a single-line, minified, and perfectly valid JSON object. Do not use markdown code blocks or any unescaped control characters like newlines within the JSON values",
        "schemaType": "manual",
        "inputSchema": "{\n  \"type\": \"object\",\n  \"properties\": {\n    \"id\": {\n      \"type\": \"string\",\n      \"description\": \"The original id of the processed Ticket\"\n    },\n    \"summary\": {\n      \"type\": \"string\",\n      \"description\": \"A few sentence summary of the issue.\"\n    },\n    \"category\": {\n      \"type\": \"string\",\n      \"description\": \"The category of the ticket.\",\n      \"enum\": [\n        \"Hardware\",\n        \"Software\",\n        \"Network\",\n        \"Account\",\n        \"Other\"\n      ]\n    },\n    \"department_id\": {\n      \"type\": \"integer\",\n      \"description\": \"The numeric ID of the department best suited to handle the ticket.\",\n      \"enum\": [12, 4, 6]\n    },\n    \"problem_location\": {\n      \"type\": \"string\",\n      \"description\": \"Where the problem is occurring (e.g., office room, device, software name).\"\n    },\n    \"customer_actions\": {\n      \"type\": \"string\",\n      \"description\": \"A summary of what the customer has already tried.\"\n    },\n    \"priority\": {\n      \"type\": \"integer\",\n      \"description\": \"The priority level of the ticket from 1 (low) to 9 (high).\"\n    },\n    \"attachment_summary\": {\n      \"type\": \"string\",\n      \"description\": \"short summary of the content from all attachments, images and documents provided (if any)\"\n    },\n    \"attachment_analysis\": {\n      \"type\": \"string\",\n      \"description\": \"A detailed analysis on how the attachments content relates to the ticket itself and what additional information on the problem can be extracted from it\"\n    },  \n    \"clarification_questions\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"string\"\n      },\n      \"description\": \"A list of detailed and fitting questions to the customer to clarify open questions.\"\n    }\n  },\n  \"required\": [\n    \"id\",\n    \"summary\",\n    \"category\",\n    \"department_id\",\n    \"problem_location\",\n    \"customer_actions\",\n    \"priority\",\n    \"attachment_summary\",\n    \"clarification_questions\"\n  ]\n}",
        "options": {
          "systemPromptTemplate": "=You are an expert IT support ticket analyst and dispatcher. Your task is to analyze the support ticket provided by the user, classify it, route it to the correct department, and formulate precise questions to gather any missing information.\n\n-----\n\n### **Instructions**\n\n1.  **Analyze the Ticket:** Carefully review the ticket content and any attached document summaries. If the ticket content is empty, the content can be found in inbound Mails. Treat inbound mails as ticket content \n2.  **Formulate Clarification Questions:** Based on your analysis, identify what information is missing to fully resolve the issue. Create a list of detailed and specific questions for the customer. The goal of these questions is to gather all necessary information so that a solution can be proposed immediately upon receiving the customer's response. Limit the questions to the most critical and impactful ones.\n3.  **Route to Department:** Determine the single most appropriate department to handle the ticket based on the rules below.\n4.  **Provide JSON Output:** Structure your entire response as a single JSON object, containing the department ID and the list of clarification questions. **Do not** add any text outside of the JSON object.\n\n-----\n\n### **Department Routing**\n\nBased on the ticket's content, determine the single most appropriate department to handle the request from the list below. Common keywords are provided to help you decide.\n\n  * **12 - Dispatching:** Field technician requests, on-site hardware repair, physical equipment delivery.\n  * **4 - Technik/Support (Advanced Support):** (Complex) technical problems, server issues, network outages, escalations from 1st Level.\n  * **6 - Verkauf/Vetrieb (Sales):** CRM issues, sales pipeline questions, customer account setup for sales.\n\nReturn **ONLY the numeric ID** for the chosen department in the `department_id` field.\n\nPlease respond in the language used by the customer, which is mostly german."
        }
      },
      "type": "@n8n/n8n-nodes-langchain.informationExtractor",
      "typeVersion": 1.2,
      "position": [704, 800],
      "id": "5868b7d3-1da5-482b-b060-aeca360e6d2c",
      "name": "Ticket Information Extractor",
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineAll",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [320, 624],
      "id": "fcf5f91b-1cc4-4c23-9a30-014a76f8dead",
      "name": "Merge Mail and Attachments"
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineAll",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [512, 800],
      "id": "bbd9e47b-1639-4129-8549-ae7465e4a302",
      "name": "Merge with Ticketdata"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Ticket Data:\n- Ticket Title: {{ $('Merge with Ticketdata').item.json.title }}\n- Ticket Content: {{ $('Merge with Ticketdata').item.json.content }}\n- Ticket Summary:  {{ $json.output.summary }}\n- Attachment Analysis: {{ $json.output.attachment_analysis }}\n- Clarification Questions: {{ $json.output.clarification_questions }}\n",
        "hasOutputParser": true,
        "messages": {
          "messageValues": [
            {
              "message": "You are a helpful IT Support employee from **Team IT**. Your goal is to write a professional and clear email to a (non-technical) user based on a ticket summary and a pre-defined list of questions. The purpose of the email is to gather the necessary information to resolve their IT issue.  \n**# Core Instructions**  \n1.  **Language:** You **MUST** write the entire email in the same language as the provided `Ticket Summary`. \n2.  **Structure:**     \n* Start with a polite greeting using the `User Name`.     \n* Briefly acknowledge the user's problem based on the `Ticket Summary`.     \n* State that you need a bit more information to help.\n* Be aware, that the user might not be able to understand technical details directly. It needs to be formulated in a way everyone understands\n* Keep the mail as short as possible, but as long as needed.\n* Don't include the subject, just the content of the mail.     \n* Present the `Questions to Ask` clearly, preferably in a numbered list.     \n* End with a professional closing from \"Team IT\".  \n**# Input Format**  * `## Customer Name:` The Customers name. * `## Ticket Summary:` A short description of the user's problem. * * `## Attachment Summary:` A short description of the attachments provided. * `## Questions to Ask:` A list of questions you need to include in the email, but can be rewritten.  \n---  ### **Example**  **[START OF INPUT]**  `## User Name:` Klaus `## Ticket Summary:` Benutzer kann sich nicht mit dem VPN verbinden, bekommt immer eine Fehlermeldung. `## Questions to Ask:` 1. Welche Fehlermeldung wird genau angezeigt? (Bitte Screenshot beifügen) 2. Von welchem Standort aus versuchen Sie sich zu verbinden (Büro oder Homeoffice)? 3. Haben Sie versucht, den Computer neu zu starten?  **[END OF INPUT]**  **[EXPECTED OUTPUT DRAFT]**  Hallo Klaus, vielen Dank für Ihre Nachricht. Ich habe gesehen, dass Sie Probleme mit der VPN-Verbindung haben.  Um das Problem schnell für Sie zu lösen, benötige ich noch ein paar zusätzliche Informationen. Könnten Sie mir bitte die folgenden Fragen beantworten?  1.  Welche Fehlermeldung wird genau angezeigt? (Bitte fügen Sie, wenn möglich, einen Screenshot bei) 2.  Von welchem Standort aus versuchen Sie sich zu verbinden (Büro oder Homeoffice)? 3.  Haben Sie bereits versucht, den Computer neu zu starten?  Sobald ich Ihre Antworten habe, kann ich die nächsten Schritte einleiten.  Viele Grüße,  Team IT"
            }
          ]
        },
        "batching": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.7,
      "position": [1232, 848],
      "id": "a89dc5d8-f340-4fe5-8b6f-d0e0229bd722",
      "name": "Draft Ticket Response"
    },
    {
      "parameters": {
        "resource": "channelMessage",
        "teamId": {
          "__rl": true,
          "value": "19231660-890a-4d8c-aa37-eec9155a7382",
          "mode": "list",
          "cachedResultName": "tlv-n8n-team"
        },
        "channelId": {
          "__rl": true,
          "value": "19:QkBEBfBTzgie0IpxWzP6TlQu71o5V7xNOshVTwxLjss1@thread.tacv2",
          "mode": "list",
          "cachedResultName": "ai-confirmations",
          "cachedResultUrl": "https://teams.cloud.microsoft/l/channel/19%3AQkBEBfBTzgie0IpxWzP6TlQu71o5V7xNOshVTwxLjss1%40thread.tacv2/tlv-n8n-team?groupId=19231660-890a-4d8c-aa37-eec9155a7382&tenantId=f50f53d7-0e4f-4626-a1a9-9fe190a9fe64&allowXTenantAccess=True&ngc=True"
        },
        "contentType": "html",
        "message": "=<div style=\"margin:0;padding:0;font-family:'Segoe UI', Arial, sans-serif;\">\n\t<div style=\"max-width:760px;margin:0 auto;\">\n\t\t<p style=\"margin:0 0 8px 0;font-weight:600;\">TANSS ticket reply ready for approval</p>\n\n\t\t<h2 style=\"margin:0 0 12px 0;line-height:1.3;\">\n\t\t\t{{ $('Merge with Ticketdata').item.json.title }}\n\t\t</h2>\n\n\t\t<ul style=\"margin:0 0 12px 0;padding-left:16px;\">\n\t\t\t<li><strong>Ticket ID</strong>: {{ $('Merge with Ticketdata').item.json.id }}</li>\n\t\t\t<li><strong>Reporter</strong>: {{ $('Merge with Ticketdata').item.json.inboundMails[0].senderName }}</li>\n\t\t\t<li><strong>Documents</strong>: {{ $('Merge with Ticketdata').item.json.numberOfDocuments }} Document(s)</li>\n\t\t\t<li><strong>Department</strong>: {{ $('Ticket Information Extractor').item.json.output.department_id }}</li>\n\t\t\t<li><strong>Priority</strong>: {{ $('Ticket Information Extractor').item.json.output.priority }}</li>\n\t\t</ul>\n\n\t\t<hr style=\"margin:8px 0 12px 0;\">\n\n\t\t<p style=\"margin:12px 0 6px 0;font-weight:600;\">AI summary</p>\n\t\t<blockquote style=\"margin:0 0 12px 0;\">\n\t\t\t{{ $('Ticket Information Extractor').item.json.output.summary }}\n\t\t</blockquote>\n\n\t\t<p style=\"margin:12px 0 6px 0;font-weight:600;\">Full draft (to be posted to TANSS as a public reply)</p>\n\t\t<pre style=\"margin:0 0 12px 0;white-space:pre-wrap;max-height:380px;overflow:auto;\">\n{{$json.text}}\n\t\t</pre>\n\n\t\t<p style=\"margin-top:12px;\">\n\t\t\t<a href=\"{{$execution.resumeUrl}}?ticketId={{ $('Merge with Ticketdata').item.json.id }}&send=true\">Approve and send via TANSS</a> ·\n\t\t\t<a href=\"{{$execution.resumeUrl}}?ticketId={{ $('Merge with Ticketdata').item.json.id }}&send=false\">Reject</a> ·\n\t\t\t<a href=\"https://your-n8n.example/webhook/tanss-request-changes?ticketId={{ $('Merge with Ticketdata').item.json.id }}\">Request changes (form)</a>\n\t\t</p>\n\n\t\t<p style=\"margin:8px 0 0 0;font-size:12px;\">Prefer working in Teams? Reply in this thread with your change requests starting with <code>CHANGE:</code>. The bot will auto-rewrite the draft and post an updated version here.</p>\n\n\t\t<p style=\"margin-top:4px;font-size:12px;\">This action will trigger the TANSS API to post the reply on the ticket.</p>\n\t</div>\n</div>",
        "options": {}
      },
      "type": "n8n-nodes-base.microsoftTeams",
      "typeVersion": 2,
      "position": [1552, 848],
      "id": "17e4f9b9-6762-4053-8f8f-21ed56164bb1",
      "name": "create message and wait for reply",
      "webhookId": "c8bd0946-be13-47ea-b64e-4eb0d1eef0b6",
      "credentials": {
        "microsoftTeamsOAuth2Api": {
          "id": "JfBX4Cn1M8SQBnFV",
          "name": "Microsoft Teams account"
        }
      }
    },
    {
      "parameters": {
        "resume": "webhook",
        "options": {}
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [1760, 848],
      "id": "d5183590-9107-44af-827d-2dad1c200ece",
      "name": "Wait",
      "webhookId": "bc537171-b22b-4d91-a10f-1379ef045532"
    },
    {
      "parameters": {
        "url": "={{ 'https://graph.microsoft.com/v1.0/teams/19231660-890a-4d8c-aa37-eec9155a7382/channels/19:QkBEBfBTzgie0IpxWzP6TlQu71o5V7xNOshVTwxLjss1@thread.tacv2/messages/' + $('create message and wait for reply').item.json.id }}",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "microsoftTeamsOAuth2Api",
        "options": {
          "response": {
            "response": {
              "responseFormat": "json"
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [2112, 608],
      "id": "f4e8f083-3da5-4bbf-80fd-7c103757ee0f",
      "name": "Get updated Teams message",
      "credentials": {
        "microsoftTeamsOAuth2Api": {
          "id": "JfBX4Cn1M8SQBnFV",
          "name": "Microsoft Teams account"
        }
      }
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "// Extract updated draft from the Teams message HTML (<pre>...</pre>) and decode entities\nconst html = $json.body?.content || '';\nlet updatedDraft = '';\nconst m = html.match(/<pre[^>]*>([\\s\\S]*?)<\\/pre>/i);\nif (m) {\n  updatedDraft = m[1]\n    .replace(/&lt;/g, '<')\n    .replace(/&gt;/g, '>')\n    .replace(/&amp;/g, '&')\n    .replace(/&?/g, '')\n    .trim();\n}\nreturn { updatedDraft };"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [2288, 608],
      "id": "56280ac9-a1ce-49b5-a32e-b5245669849e",
      "name": "Extract updated draft"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://helpdesk.team-it-group.de/backend/api/v1/tickets/{{ $('Wait').item.json.query.ticketId }}/comments",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ { title: 'Approved AI Reply', content: $json.updatedDraft, internal: false } }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [2656, 496],
      "id": "a11e915c-9fd9-4009-a382-139fda65a92c",
      "name": "Post approved reply to TANSS",
      "credentials": {
        "httpHeaderAuth": {
          "id": "O7ih4vhlXtdpFYEv",
          "name": "Header Auth account"
        }
      }
    },
    {
      "parameters": {
        "model": "mistral-medium-latest",
        "options": {
          "maxRetries": 1
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatMistralCloud",
      "typeVersion": 1,
      "position": [992, 1136],
      "id": "853c762d-567c-4b81-a5cc-0f99b198fb57",
      "name": "mistral-medium-latest",
      "credentials": {
        "mistralCloudApi": {
          "id": "OKqIIU4OvY7yKbuT",
          "name": "Mistral Cloud account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "4755eb03-3c91-4e0d-be89-642d478a5e74",
              "leftValue": "={{ $json.query.send }}",
              "rightValue": "true",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [1952, 848],
      "id": "25b4af10-536f-4e0d-bb56-45713f34435a",
      "name": "send?"
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "// Get the raw string from the previous node's error path\nconst rawString = $json.error;\n\n// Use a regular expression to reliably find the JSON content, even with surrounding text\nconst jsonMatch = rawString.match(/\\{[\\s\\S]*\\}/);\n\n// If no JSON object is found, throw an error\nif (!jsonMatch) {\n  throw new Error(\"Could not find a valid JSON object in the input string.\");\n}\n\nlet jsonString = jsonMatch[0];\n\n// **THIS IS THE KEY FIX**\n// Before parsing, replace unescaped control characters with their valid escaped versions.\n// 1. Replace backslashes: \\ -> \\\\\n// 2. Replace newlines: \\n -> \\\\n\n// 3. Replace carriage returns: \\r -> \\\\r\njsonString = jsonString.replace(/\\\\/g, \"\\\\\\\\\")\n                       .replace(/\\n/g, \"\\\\n\")\n                       .replace(/\\r/g, \"\\\\r\");\n\n// Parse the now-clean and valid JSON string\n// This object will be the output of this node.\nreturn JSON.parse(jsonString);"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1008, 912],
      "id": "00f078aa-d8d3-4d30-bcf1-2d6774726267",
      "name": "fix model output"
    },
    {
      "parameters": {
        "content": "### ONLY ATTACH IN PROD",
        "height": 400,
        "width": 208,
        "color": 3
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [2608, 432],
      "typeVersion": 1,
      "id": "4d708c25-8602-4009-93e2-39d38b652bd5",
      "name": "Sticky Note3"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [2192, 864],
      "id": "de3eb2dd-2312-42e3-88f5-c780102c4296",
      "name": "End"
    },
    {
      "parameters": {
        "content": "## TANSS Manipulation\nThese Nodes are responsible for making edits to the original TANSS Tickets",
        "height": 608,
        "width": 432,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [2400, 240],
      "typeVersion": 1,
      "id": "d111d8d3-6d82-4593-84f2-3ddf5181c7cd",
      "name": "Sticky Note1"
    },
    {
      "parameters": {
        "content": "## AI Stack\n*  Ticket Classification \n*  Response Automation ",
        "height": 656,
        "width": 784,
        "color": 2
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [688, 640],
      "typeVersion": 1,
      "id": "c45c7368-20de-48c7-a962-a60f3900e28a",
      "name": "Sticky Note4"
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "PRtlgMd5w7PA0yvG",
          "mode": "list",
          "cachedResultName": "sub_tanss_attachments"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {
            "id": "={{ $json.id }}",
            "numberOfDocuments": "={{ $json.numberOfDocuments }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "id",
              "displayName": "id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "number"
            },
            {
              "id": "numberOfDocuments",
              "displayName": "numberOfDocuments",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "number"
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": true
        },
        "options": {}
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.2,
      "position": [-80, 416],
      "id": "ddb3d48a-eb49-443e-b4eb-db2951823c1b",
      "name": "Execute Attachment Workflow"
    },
    {
      "parameters": {
        "url": "=https://helpdesk.team-it-group.de/backend/api/v1/tickets/history/{{ $json.id }}",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [-192, 640],
      "id": "3b974c99-d17b-419e-a98c-9702274aa784",
      "name": "Get Ticket History",
      "credentials": {
        "httpHeaderAuth": {
          "id": "O7ih4vhlXtdpFYEv",
          "name": "Header Auth account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Get the input data from the previous node.\nconst inputData = $input.first().json;\n\n// Initialize arrays to hold the categorized emails.\nconst inboundMails = [];\nconst outboundMails = [];\n\n// Ensure the 'mails' array exists before processing.\nif (inputData.content && Array.isArray(inputData.content.mails)) {\n  // Loop through each mail object in the input array.\n  for (const mail of inputData.content.mails) {\n    // Create a new, simplified object with only the required fields.\n    const simplifiedMail = {\n      senderName: mail.senderName,\n      subject: mail.subject,\n      bodyPlain: mail.bodyPlain,\n    };\n\n    // Check the 'inbound' property to categorize the mail.\n    if (mail.inbound === true) {\n      inboundMails.push(simplifiedMail);\n    } else {\n      outboundMails.push(simplifiedMail);\n    }\n  }\n}\n\n// Prepare the final output object.\nconst output = {\n  inboundMails,\n  outboundMails,\n};\n\n// Return the structured data for the next node in the workflow.\n// n8n expects an array of items, each with a 'json' property.\nreturn [{\n  json: output\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [16, 640],
      "id": "7535578f-0a45-45b7-a491-6d7de398f8cf",
      "name": "Restructure Mail Data"
    },
    {
      "parameters": {
        "content": "## Mails\n",
        "width": 464,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [-272, 624],
      "typeVersion": 1,
      "id": "0795245f-f637-4f3a-b5c3-b71504e34e33",
      "name": "Sticky Note5"
    },
    {
      "parameters": {
        "content": "## Todo's\n* Which Tickets should be fetched (company, employee, board)?\n* adapt \"company\" parameter",
        "height": 304,
        "width": 224
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [-1104, 688],
      "typeVersion": 1,
      "id": "c26bb36e-1f02-4db7-98dd-4a0d184710f9",
      "name": "Sticky Note6"
    },
    {
      "parameters": {
        "content": "\n\n\n\n\n\n\n\n\n\n\n\n\n## Human in the Loop - Teams Flow",
        "height": 448,
        "width": 928,
        "color": 6
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [1472, 576],
      "typeVersion": 1,
      "id": "544547d2-7ddb-45ed-b0fc-34390fdab6c3",
      "name": "Sticky Note7"
    },
    {
      "parameters": {
        "method": "PUT",
        "url": "https://helpdesk.team-it-group.de/backend/api/v1/tickets",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"ids\": []\n}",
        "options": {
          "response": {
            "response": {
              "neverError": true,
              "responseFormat": "json"
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [-1040, 1024],
      "id": "ff1d846c-5f63-4dcb-afbd-2f6bfcba016c",
      "name": "Get Tickets with IDs",
      "credentials": {
        "httpHeaderAuth": {
          "id": "O7ih4vhlXtdpFYEv",
          "name": "Header Auth account"
        }
      }
    }
  ],
  "connections": {
    "Schedule Trigger": {
      "main": [
        [
          {
            "node": "Get API Key",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Out": {
      "main": [
        [
          {
            "node": "If not already classified",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get all last hours Tickets": {
      "main": [[]]
    },
    "If not already classified": {
      "main": [
        [
          {
            "node": "Merge with Ticketdata",
            "type": "main",
            "index": 1
          },
          {
            "node": "Execute Attachment Workflow",
            "type": "main",
            "index": 0
          },
          {
            "node": "Get Ticket History",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "No Operation, do nothing",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get API Key": {
      "main": [
        [
          {
            "node": "Get Tickets with IDs",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Ticket Information Extractor": {
      "main": [
        [
          {
            "node": "Draft Ticket Response",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "fix model output",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge Mail and Attachments": {
      "main": [
        [
          {
            "node": "Merge with Ticketdata",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge with Ticketdata": {
      "main": [
        [
          {
            "node": "Ticket Information Extractor",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Draft Ticket Response": {
      "main": [
        [
          {
            "node": "create message and wait for reply",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "create message and wait for reply": {
      "main": [
        [
          {
            "node": "Wait",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait": {
      "main": [
        [
          {
            "node": "send?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get updated Teams message": {
      "main": [
        [
          {
            "node": "Extract updated draft",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract updated draft": {
      "main": [[]]
    },
    "mistral-medium-latest": {
      "ai_languageModel": [
        [
          {
            "node": "Ticket Information Extractor",
            "type": "ai_languageModel",
            "index": 0
          },
          {
            "node": "Draft Ticket Response",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "send?": {
      "main": [
        [
          {
            "node": "Get updated Teams message",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "End",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "fix model output": {
      "main": [
        [
          {
            "node": "Draft Ticket Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execute Attachment Workflow": {
      "main": [
        [
          {
            "node": "Merge Mail and Attachments",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Ticket History": {
      "main": [
        [
          {
            "node": "Restructure Mail Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Restructure Mail Data": {
      "main": [
        [
          {
            "node": "Merge Mail and Attachments",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Get Tickets with IDs": {
      "main": [
        [
          {
            "node": "Split Out",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {
    "Get all last hours Tickets": [
      {
        "meta": {
          "text": "Object found",
          "linkedEntities": {
            "companies": {
              "7": {
                "name": "Test"
              }
            },
            "tickets": {},
            "ticketStates": {
              "1": {
                "image": "icon16px-01-neu.png",
                "name": "neu",
                "rank": 1
              },
              "1000": {
                "image": "icon16px-10-erledigt.png",
                "name": "erledigt",
                "rank": 1000
              }
            },
            "ticketTypes": {
              "3": {
                "name": "Störung"
              }
            },
            "departments": {
              "4": {
                "name": "Technik/Support"
              }
            },
            "employees": {
              "8371": {
                "initials": "MD",
                "name": "Daiber, Matthias",
                "email": "matthias.daiber@teclead-ventures.de"
              }
            },
            "contracts": {},
            "phases": {},
            "costCenters": {},
            "orderBys": {}
          },
          "properties": {
            "extras": {
              "count": 1
            },
            "editable": false
          }
        },
        "content": [
          {
            "id": 97092,
            "companyId": 7,
            "remitterId": 0,
            "title": "Help request from Krawinkel Ingenieure GmbH / Pc nutzt nicht gesamtenverfügbaren Arbeitsspeicher",
            "content": "\nNew support request from\nFirst Name: Fynn\nLast Name: Smyrek\nEmail: f.smyrek@krawinkel.net\nPhone: 02151 768046\nSubject: Pc nutzt nicht gesamten verfügbaren Arbeitsspeicher\nProblem Description: Mein PC nutzt von den 64GB Arbeitsspeicher maximal 32 GB und für ein Programm maximal 2 GB. Wodurch Prozesse häufig abstürzen oder ewig brauchen.\nDa eine Abgabe bevorsteht benötige ich dringend Unterstützung.\nLiebe Grüße\nFynn Smyrek\nDevice: KI236\nNinja URL: https://team-it.rmmservice.eu/#/deviceDashboard/2008/overview\nDevice Role: WINDOWS_WORKSTATION\nPublic IP: 109.90.96.117\nPrivate IPs: 192.168.61.61;fd00::b2ce:d353:69c6:8420|fd00::59ec:2679:6642:8d8d|fe80::26d0:53d7:3e88:f30c;169.254.86.127;fe80::cc5:66db:4aa8:8b38\nDevice ID: 2.008\nOrganization: Krawinkel Ingenieure GmbH\nLocation: Hauptsitz\nDescription: <UNKNOWN>\nOrganization URL: https://team-it.rmmservice.eu/#/customerDashboard/49/overview\nPolicy: Windows Workstation - TeamIT 1.0\nPolicy Description: 2023-06-08\nPolicy URL: https://team-it.rmmservice.eu/#/editor/policy/35\nEnvironment Variables\nCOMPUTERNAME: KI236\nOS: Windows 11 Professional Edition\nNUMBER_OF_PROCESSORS: 32\nPROCESSOR_ARCHITECTURE: x86_64\nUSERDOMAIN: KI-GMBH-KREFELD\nUSERNAME: Smyrek",
            "creationDate": 1755076066,
            "assignedToEmployeeId": 0,
            "assignedToDepartmentId": 0,
            "statusId": 1,
            "linkTypeId": 0,
            "linkId": 0,
            "deadlineDate": 0,
            "project": false,
            "projectId": 0,
            "createdEmployeeId": 8371,
            "typeId": 3,
            "priority": 5,
            "repair": false,
            "reminder": 0,
            "reactionHours": 0,
            "dueDate": 1755090376,
            "accesories": "",
            "attention": "YES",
            "orderById": 0,
            "locked": false,
            "relationshipLinkTypeId": 0,
            "relationshipLinkId": 0,
            "internalContent": "",
            "resubmissionDate": 0,
            "resubmissionText": "",
            "phaseId": 0,
            "estimatedMinutes": 0,
            "localTicketAdminFlag": "NONE",
            "localTicketAdminEmployeeId": 0,
            "contractId": 0,
            "lastStateChangeDate": 0,
            "lastStateChangeEmployeeId": 0,
            "modifiedBy": 0,
            "modifiedTime": 0,
            "numberOfDocuments": 0,
            "chats": [],
            "tags": [
              {
                "id": 78,
                "name": "Ticket ohne Reaktion",
                "backgroundColor": "#f78dee",
                "fontColor": "#111212",
                "description": "",
                "image": "",
                "groupTagId": 42,
                "groupTagInheritance": true,
                "unique": false,
                "active": true,
                "statistic": false,
                "visibilities": [
                  {
                    "tagId": 42,
                    "linkTypeId": 34,
                    "linkId": 4,
                    "extras": {}
                  }
                ],
                "deleteAccess": [],
                "isGroupParent": false,
                "groupTag": {
                  "id": 42,
                  "name": "Support / Technik",
                  "backgroundColor": "#06c6c6",
                  "fontColor": "#000000",
                  "description": "",
                  "image": "",
                  "groupTagId": 0,
                  "groupTagInheritance": true,
                  "unique": false,
                  "active": true,
                  "statistic": false,
                  "visibilities": [
                    {
                      "tagId": 42,
                      "linkTypeId": 34,
                      "linkId": 4,
                      "extras": {}
                    }
                  ],
                  "deleteAccess": [],
                  "isGroupParent": false,
                  "isFavorite": false,
                  "mayRemove": true
                },
                "isFavorite": false,
                "mayRemove": true
              }
            ]
          }
        ]
      }
    ],
    "Get API Key": [
      {
        "apiKey": "Bearer eyJraWQiOiJ4NXB1NDEiLCJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI4MzcxIiwiZXhwIjoxNzU1MDk5NDQ4LCJ0eXBlIjoiQUNDRVNTIn0.uMN4gH5sLCHwgIlSRPMIXTSr7fgOM-AzzZ2wesnv2si8BrDvBrPH_RgLQR46rvTgz-GYsX0A5mqt3h5TKCXSUf1fIANZGFLS8bA6pWjV_XW1Zu2kylTznq_TMHiCfCkS3_LdZiRnAsk_AA1eGOwF_7Di2T5phQExnWemolKrozE",
        "expire": "2025-08-13T11:37:28.000-04:00"
      }
    ]
  },
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "cb82cb908cab52e40008ef27de71c2aa4d5b63789fd0294ce950d5a085fdc1d1"
  }
}
